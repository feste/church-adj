(define (last lst)
  (first (fold (lambda (a lst) (append (list a) lst)) '() lst)))

;100 bins
(define bins
  (mem
   (lambda (item)
     ;nsubj=10
     (case item
           (('watch) '((1.5 4.5 7.5 10.5 13.5 16.5 19.5 22.5 25.5 28.5 31.5 34.5 37.5 40.5 43.5 46.5 49.5 52.5 55.5 58.5 61.5 64.5 67.5 70.5 73.5 76.5 79.5 82.5 85.5 88.5 91.5 94.5 97.5 100.5 103.5 106.5 109.5 112.5 115.5 118.5)
                       (0.019 0.025 0.056 0.221 0.293 0.274 0.347 0.381 0.401 0.442 0.438 0.474 0.496 0.520 0.556 0.643 0.698 0.677 0.630 0.598 0.612 0.619 0.615 0.603 0.603 0.576 0.570 0.563 0.563 0.552 0.541 0.524 0.491 0.476 0.458 0.459 0.445 0.453 0.472 0.528)))
           (('coffee-maker) '((2 6 10 14 18 22 26 30 34 38 42 46 50 54 58 62 66 70 74 78 82 86 90 94 98 102 106 110 114 118 122 126 130 134 138 142 146 150 154 158)
                              (0.02166667 0.02333333 0.09166667 0.12833333 0.26333333 0.50500000 0.68333333 0.68166667 0.64500000 0.60500000 0.61166667 0.61833333 0.60166667 0.60500000 0.59333333 0.57333333 0.54666667 0.52833333 0.46500000 0.45500000 0.48500000 0.46500000 0.39333333 0.37166667 0.35666667 0.21666667 0.19666667 0.18833333 0.17833333 0.15833333 0.15833333 0.13500000 0.11000000 0.10833333 0.12333333 0.18666667 0.23000000 0.15500000 0.10666667 0.17500000)))
           (('sweater) '((1.5 4.5 7.5 10.5 13.5 16.5 19.5 22.5 25.5 28.5 31.5 34.5 37.5 40.5 43.5 46.5 49.5 52.5 55.5 58.5 61.5 64.5 67.5 70.5 73.5 76.5 79.5 82.5 85.5 88.5 91.5 94.5 97.5 100.5 103.5 106.5 109.5 112.5 115.5 118.5)
                         (0.10222222 0.10222222 0.20888889 0.32111111 0.39222222 0.45222222 0.54555556 0.59333333 0.65888889 0.68888889 0.71888889 0.73888889 0.72888889 0.73111111 0.73111111 0.72000000 0.69444444 0.57444444 0.55333333 0.52111111 0.46000000 0.41888889 0.37888889 0.32777778 0.27555556 0.25000000 0.21666667 0.19777778 0.17333333 0.15888889 0.19888889 0.20444444 0.18444444 0.16777778 0.14111111 0.10222222 0.09222222 0.08333333 0.06777778 0.04111111)))
           (('laptop) '((25 75 125 175 225 275 325 375 425 475 525 575 625 675 725 775 825 875 925 975 1025 1075 1125 1175 1225 1275 1325 1375 1425 1475 1525 1575 1625 1675 1725 1775 1825 1875 1925 1975)
                        (0.01857143 0.01714286 0.05142857 0.11000000 0.18428571 0.30285714 0.45857143 0.47428571 0.45142857 0.53571429 0.58857143 0.64714286 0.65142857 0.69000000 0.66571429 0.62000000 0.58142857 0.52714286 0.56571429 0.57714286 0.51285714 0.51571429 0.50000000 0.47714286 0.46857143 0.45571429 0.43714286 0.39571429 0.38428571 0.35571429 0.33142857 0.31000000 0.30000000 0.31571429 0.35571429 0.38142857 0.30571429 0.19857143 0.16428571 0.12714286)))
           (('headphones) '((3 9 15 21 27 33 39 45 51 57 63 69 75 81 87 93 99 105 111 117 123 129 135 141 147 153 159 165 171 177 183 189 195 201 207 213 219 225 231 237)
                            (0.18125 0.30250 0.35500 0.52000 0.59250 0.59625 0.64125 0.67125 0.63250 0.60375 0.56250 0.55375 0.53125 0.45875 0.44750 0.43500 0.37500 0.29750 0.28000 0.26375 0.32000 0.30375 0.29500 0.29375 0.27000 0.27375 0.25500 0.25125 0.24625 0.23750 0.26125 0.24375 0.24000 0.26750 0.26375 0.21875 0.20375 0.18375 0.16375 0.16000)))))))

(define (prior item) (apply multinomial (bins item)))
(define (theta-prior item) (uniform-draw (first (bins item))))

(define (utterance-prior) (multinomial '(expensive no-utt) '(0.3678794 1)))

(define pragmatic-listener
  (mem (lambda (utterance item)
         ;query price and theta given speaker would have said that
         (mh-query 30000 5
                   (define price (apply multinomial (bins item)))
                   (define theta (theta-prior item))
                   (list price theta)
                   (eq? (apply multinomial (speaker price theta item)) utterance)))))

(define speaker
  (mem (lambda (price theta item)
         ;query utterance given literal listener would guess price given theta
         (enumeration-query
          (define u (utterance-prior))
          u
          (eq? (apply multinomial (literal-listener u theta item)) price)))))

(define literal-listener
  (mem (lambda (u theta item)
         (define bin (bins item))
         (define (post-utterance)
           (define bin-pairs (map list
                                  (first bin)
                                  (second bin)))
           (define filtered-bin-pairs (fold
                                       (lambda (a lst) (if (>= (first a) theta)
                                                           (pair a lst)
                                                           lst))
                                       '()
                                       bin-pairs))
           (list (map first filtered-bin-pairs) (map second filtered-bin-pairs)))
         (if (eq? u 'expensive)
             (post-utterance)
             bin))))


(define sorites-model
  (mem
   (lambda (item)
     ;human data for comparison
     (define people (case item
                          (('watch) '(8.308824 8.454545 7.652778 6.826667 6.255319 5.750000))
                          (('laptop) '(8.394366 8.337838 7.179104 5.214286 4.550000 3.536585))
                          (('coffee-maker) '(8.554054 7.746269 6.613333 6.171875 5.150000 4.414634))
                          (('headphones) '(8.460526 7.985075 5.936508 5.337500 4.352941 4.045455))
                          (('sweater) '(8.655738 7.973684 7.027397 6.377049 5.179487 4.000000))))
     
     
     ;human standard deviations from experiment
     (define epsilons (map (lambda (e) (* e (case item
                                                  (('watch) 15.28736)
                                                  (('laptop) 254.2707)
                                                  (('coffee-maker) 22.31799)
                                                  (('headphones) 31.54902)
                                                  (('sweater) 15.28736))))
                           '(0.01 0.10 0.50 1.00 2.00 3.00)))
     
     ;results of model-
     (define samples (pragmatic-listener 'expensive item))
     (define prices (map first samples))
     (define thetas (map second samples))
     
     ;inductive premise
     (define (inductive e)
       (define lst (map (lambda (p t) (if (>= (- p e) t) 1 0)) prices thetas))
       ;get mean value of inductive premise
       (/ (apply + lst) (length lst)))
     
     (define model-judgements (map inductive epsilons))
     ;comparison: people to model
     (define people-vs-model (map pair
                                  people
                                  (map inductive epsilons)))
     (list people-vs-model
           model-judgements
           prices
           thetas))))

(define items '(watch
                laptop
                coffee-maker
                headphones
                sweater))

(define ppl-vs-mod (fold
                    append
                    '()
                    (map (lambda (item) (first (sorites-model item))) items)))

(list
 'watch
 (second (sorites-model 'watch))
 (mean (third (sorites-model 'watch)))
 (mean (fourth (sorites-model 'watch)))
 'laptop
 (second (sorites-model 'laptop))
 (mean (third (sorites-model 'laptop)))
 (mean (fourth (sorites-model 'laptop)))
 'coffee-maker
 (second (sorites-model 'coffee-maker))
 (mean (third (sorites-model 'coffee-maker)))
 (mean (fourth (sorites-model 'coffee-maker)))
 'headphones
 (second (sorites-model 'headphones))
 (mean (third (sorites-model 'headphones)))
 (mean (fourth (sorites-model 'headphones)))
 'sweater
 (second (sorites-model 'sweater))
 (mean (third (sorites-model 'sweater)))
 (mean (fourth (sorites-model 'sweater))))