(define (last lst)
  (first (fold (lambda (a lst) (append (list a) lst)) '() lst)))

;100 bins
(define bins
  (mem
   (lambda (item)
     ;nsubj=17
     (case item
           (('watch) '((15  45  75 105 135 165 195 225 255 285 315 345 375 405 435 465 495 525 555 585)
                       (0.54083333 0.60000000 0.58833333 0.61666667 0.59333333 0.50333333 0.45750000 0.40416667 0.37000000 0.33666667 0.24083333 0.20583333 0.17000000 0.14916667 0.13250000 0.11916667 0.08416667 0.09083333 0.08916667 0.08250000)))
           (('coffee-maker) '((10  30  50  70  90 110 130 150 170 190 210 230 250 270 290 310 330 350 370 390)
                              (0.46666667 0.62333333 0.73733333 0.71666667 0.65866667 0.52066667 0.41733333 0.33133333 0.22533333 0.19800000 0.16266667 0.13066667 0.11000000 0.06800000 0.06000000 0.05933333 0.05266667 0.05066667 0.04733333 0.05600000)))
           (('sweater) '((10  30  50  70  90 110 130 150 170 190 210 230 250 270 290 310 330 350 370 390)
                         (0.61500000 0.76916667 0.75500000 0.60833333 0.49083333 0.36500000 0.26416667 0.20833333 0.16000000 0.15166667 0.10666667 0.11250000 0.10083333 0.08166667 0.07333333 0.05833333 0.05416667 0.04250000 0.03083333 0.01416667)))
           (('laptop) '((130  390  650  910 1170 1430 1690 1950 2210 2470 2730 2990 3250 3510 3770 4030 4290 4550 4810 5070)
                        (0.22500000 0.35071429 0.71285714 0.80428571 0.74714286 0.66428571 0.53214286 0.44642857 0.36571429 0.27928571 0.21571429 0.16857143 0.13357143 0.10785714 0.09142857 0.08500000 0.08500000 0.08357143 0.07285714 0.08071429)))
           (('headphones) '((10  30  50  70  90 110 130 150 170 190 210 230 250 270 290 310 330 350 370 390)
                            (0.63000000 0.65066667 0.72200000 0.72600000 0.70666667 0.62200000 0.49066667 0.43666667 0.37333333 0.33933333 0.22466667 0.20600000 0.18800000 0.15000000 0.13400000 0.11733333 0.09600000 0.05200000 0.05466667 0.08933333)))))))

(define (prior item) (apply multinomial (bins item)))
(define (theta-prior item) (uniform-draw (first (bins item))))

(define (utterance-prior) (multinomial '(expensive no-utt) '(0.3678794 1)))

(define pragmatic-listener
  (mem (lambda (utterance item)
         ;query price and theta given speaker would have said that
         (mh-query 30000 5
                   (define price (apply multinomial (bins item)))
                   (define theta (theta-prior item))
                   (list price theta)
                   (eq? (apply multinomial (speaker price theta item)) utterance)))))

(define speaker
  (mem (lambda (price theta item)
         ;query utterance given literal listener would guess price given theta
         (enumeration-query
          (define u (utterance-prior))
          u
          (eq? (apply multinomial (literal-listener u theta item)) price)))))

(define literal-listener
  (mem (lambda (u theta item)
         (define bin (bins item))
         (define (post-utterance)
           (define bin-pairs (map list
                                  (first bin)
                                  (second bin)))
           (define filtered-bin-pairs (fold
                                       (lambda (a lst) (if (>= (first a) theta)
                                                           (pair a lst)
                                                           lst))
                                       '()
                                       bin-pairs))
           (list (map first filtered-bin-pairs) (map second filtered-bin-pairs)))
         (if (eq? u 'expensive)
             (post-utterance)
             bin))))


(define sorites-model
  (mem
   (lambda (item)
     ;human data for comparison
     (define people (case item
                          (('watch) '(8.308824 8.454545 7.652778 6.826667 6.255319 5.750000))
                          (('laptop) '(8.394366 8.337838 7.179104 5.214286 4.550000 3.536585))
                          (('coffee-maker) '(8.554054 7.746269 6.613333 6.171875 5.150000 4.414634))
                          (('headphones) '(8.460526 7.985075 5.936508 5.337500 4.352941 4.045455))
                          (('sweater) '(8.655738 7.973684 7.027397 6.377049 5.179487 4.000000))))
     
     
     ;human standard deviations from experiment
     (define epsilons (map (lambda (e) (* e (case item
                                                  (('watch) 15.28736)
                                                  (('laptop) 254.2707)
                                                  (('coffee-maker) 22.31799)
                                                  (('headphones) 31.54902)
                                                  (('sweater) 15.28736))))
                           '(0.01 0.10 0.50 1.00 2.00 3.00)))
     
     ;results of model-
     (define samples (pragmatic-listener 'expensive item))
     (define prices (map first samples))
     (define thetas (map second samples))
     
     ;inductive premise
     (define (inductive e)
       (define lst (map (lambda (p t) (if (>= (- p e) t) 1 0)) prices thetas))
       ;get mean value of inductive premise
       (/ (apply + lst) (length lst)))
     
     (define model-judgements (map inductive epsilons))
     ;comparison: people to model
     (define people-vs-model (map pair
                                  people
                                  (map inductive epsilons)))
     (list people-vs-model
           model-judgements
           prices
           thetas))))

(define items '(watch
                laptop
                coffee-maker
                headphones
                sweater))

(define ppl-vs-mod (fold
                    append
                    '()
                    (map (lambda (item) (first (sorites-model item))) items)))

(list
 'watch
 (second (sorites-model 'watch))
 (mean (third (sorites-model 'watch)))
 (mean (fourth (sorites-model 'watch)))
 'laptop
 (second (sorites-model 'laptop))
 (mean (third (sorites-model 'laptop)))
 (mean (fourth (sorites-model 'laptop)))
 'coffee-maker
 (second (sorites-model 'coffee-maker))
 (mean (third (sorites-model 'coffee-maker)))
 (mean (fourth (sorites-model 'coffee-maker)))
 'headphones
 (second (sorites-model 'headphones))
 (mean (third (sorites-model 'headphones)))
 (mean (fourth (sorites-model 'headphones)))
 'sweater
 (second (sorites-model 'sweater))
 (mean (third (sorites-model 'sweater)))
 (mean (fourth (sorites-model 'sweater))))